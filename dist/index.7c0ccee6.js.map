{"mappings":"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","sources":["app.js"],"sourcesContent":["/*class Form {\n  #fields = []; //c'est des propriété privée qui ne devrais pas être accesible depuis la classe elle-même\n  #title = \"\";\n\n  constructor(title) {\n    this.#title = title;\n  }\n\n\n  #submit(e) {\n    // Prevent page from refreshing on form submit.\n    e.preventDefault();\n\n    // Collect the values from the form fields. formData will be an array of objects\n    // with key-value pairs referring to each field's name and value. \n    const formData = this.#fields.map((field) => {\n      return {\n        [field.name]: field.value\n      };\n    });\n\n    // Find the toast element and add the \"show\" class to it. \n    const toastElement = document.querySelector(\"#toast\");\n    toastElement.classList.add(\"show\");\n\n    // Set the text content of the toast element to be a JSON representation of formData.\n    toastElement.textContent = formData.map((el) => JSON.stringify(el));\n\n    // Wait 5 seconds, then remove the show class from the toast. \n    setTimeout(() => {\n      toastElement.classList.remove(\"show\");\n    }, 5000);\n\n    return formData;\n  }\n}*/\n\nclass Form {  // regarder explication dans fichier word car pas compris l'exercice\n  #fields = [];\n  #formElement = document.createElement(\"form\");\n\n  constructor(title) {\n    this.title = title;\n  }\n\n  addField(field) {\n    if (!field instanceof Field) {\n      throw new Error(\"You tried to add something that is not a field\");\n    }\n    this.#fields.push(field);\n    console.log(`Added field ${field.name} to form`);\n    return this;\n  }\n\n  render() {\n    const titleElement = document.createElement(\"h1\");\n    titleElement.textContent = this.title;\n    this.#formElement.append(titleElement);\n\n    this.#fields.forEach((field) => {\n      const fieldElement = field.render();\n      this.#formElement.append(fieldElement);\n    });\n\n    const buttonElement = document.createElement(\"button\");\n    buttonElement.type = \"submit\";\n    buttonElement.textContent = \"Submit\";\n    this.#formElement.append(buttonElement);\n\n    this.#formElement.addEventListener(\"submit\", this.#submit.bind(this));\n\n    document.body.append(this.#formElement);\n  }\n\n  #submit(e) {\n    // Prevent page from refreshing on form submit.\n    e.preventDefault();\n\n    // Collect the values from the form fields. formData will be an array of objects\n    // with key-value pairs referring to each field's name and value.\n    const formData = this.#fields.map((field) => {\n      return {\n        [field.name]: field.value\n      };\n    });\n\n    // Find the toast element and add the \"show\" class to it.\n    const toastElement = document.querySelector(\"#toast\");\n    toastElement.classList.add(\"show\");\n\n    // Set the text content of the toast element to be a JSON representation of formData.\n    toastElement.textContent = formData.map((el) => JSON.stringify(el));\n\n    // Wait 5 seconds, then remove the show class from the toast.\n    setTimeout(() => {\n      toastElement.classList.remove(\"show\");\n    }, 5000);\n\n    return formData;\n  }\n}\n\nclass Field {\n  #inputElement = document.createElement(\"input\");\n\n  constructor(options) {\n    this.name = options.name;\n    this.type = options.type;\n    this.label = options.label;\n  }\n\n  render() {\n    const labelElement = document.createElement(\"label\");\n    labelElement.innerText = this.label;\n\n    this.#inputElement.name = this.name;\n    this.#inputElement.type = this.type;\n\n    const fieldContainer = document.createElement(\"div\");\n    fieldContainer.classList.add(\"field-container\");\n\n    fieldContainer.append(labelElement);\n    fieldContainer.append(this.#inputElement);\n\n    return fieldContainer;\n  }\n\n  get value() {\n    return this.#inputElement.value;\n  }\n}\n\nconst form = new Form(\"Signup\");\n\nconst email = new Field({\n  name: \"email\",\n  type: \"email\",\n  label: \"email\"\n});\n\nconst password = new Field({\n  name: \"password\",\n  type: \"password\",\n  label: \"password\"\n});\n\nform.addField(email).addField(password).render();\n\n\n"],"names":[],"version":3,"file":"index.7c0ccee6.js.map","sourceRoot":"/__parcel_source_root/"}