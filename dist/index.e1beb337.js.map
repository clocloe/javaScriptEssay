{"mappings":"AAqCA,MAAMA,KACJC,GAAU,GACVC,GAAeC,SAASC,cAAc,QAEtCC,YAAYC,GACVC,KAAKD,MAAQA,CACf,CAEAE,SAASC,GACP,IAAKA,aAAiBC,MACpB,MAAM,IAAIC,MAAM,kDAIlB,OAFAJ,MAAKN,EAAQW,KAAKH,GAClBI,QAAQC,IAAI,eAAeL,EAAMM,gBAC1BR,IACT,CAEAS,SACE,MAAMC,EAAed,SAASC,cAAc,MAC5Ca,EAAaC,YAAcX,KAAKD,MAChCC,MAAKL,EAAaiB,OAAOF,GAEzBV,MAAKN,EAAQmB,SAASX,IACpB,MAAMY,EAAeZ,EAAMO,SAC3BT,MAAKL,EAAaiB,OAAOE,EAAA,IAG3B,MAAMC,EAAgBnB,SAASC,cAAc,UAC7CkB,EAAcC,KAAO,SACrBD,EAAcJ,YAAc,SAC5BX,MAAKL,EAAaiB,OAAOG,GAEzBf,MAAKL,EAAasB,iBAAiB,SAAUjB,MAAKkB,EAAQC,KAAKnB,OAE/DJ,SAASwB,KAAKR,OAAOZ,MAAKL,EAC5B,CAEAuB,GAAQG,GAENA,EAAEC,iBAIF,MAAMC,EAAWvB,MAAKN,EAAQ8B,KAAKtB,IAC1B,CACL,CAACA,EAAMM,MAAON,EAAMuB,UAKlBC,EAAe9B,SAAS+B,cAAc,UAW5C,OAVAD,EAAaE,UAAUC,IAAI,QAG3BH,EAAaf,YAAcY,EAASC,KAAKM,GAAOC,KAAKC,UAAUF,KAG/DG,YAAW,KACTP,EAAaE,UAAUM,OAAO,UAC7B,KAEIX,CACT,EAGF,MAAMpB,MACJgC,GAAgBvC,SAASC,cAAc,SAEvCC,YAAYsC,GACVpC,KAAKQ,KAAO4B,EAAQ5B,KACpBR,KAAKgB,KAAOoB,EAAQpB,KACpBhB,KAAKqC,MAAQD,EAAQC,KACvB,CAEA5B,SACE,MAAM6B,EAAe1C,SAASC,cAAc,SAC5CyC,EAAaC,UAAYvC,KAAKqC,MAE9BrC,MAAKmC,EAAc3B,KAAOR,KAAKQ,KAC/BR,MAAKmC,EAAcnB,KAAOhB,KAAKgB,KAE/B,MAAMwB,EAAiB5C,SAASC,cAAc,OAM9C,OALA2C,EAAeZ,UAAUC,IAAI,mBAE7BW,EAAe5B,OAAO0B,GACtBE,EAAe5B,OAAOZ,MAAKmC,GAEpBK,CACT,CAEIf,YACF,OAAOzB,MAAKmC,EAAcV,KAC5B,EAGF,MAAMgB,KAAO,IAAIhD,KAAK,UAEhBiD,MAAQ,IAAIvC,MAAM,CACtBK,KAAM,QACNQ,KAAM,QACNqB,MAAO,UAGHM,SAAW,IAAIxC,MAAM,CACzBK,KAAM,WACNQ,KAAM,WACNqB,MAAO,aAGTI,KAAKxC,SAASyC,OAAOzC,SAAS0C,UAAUlC","sources":["app.js"],"sourcesContent":["/*class Form {\n  #fields = []; //c'est des propriété privée qui ne devrais pas être accesible depuis la classe elle-même\n  #title = \"\";\n\n  constructor(title) {\n    this.#title = title;\n  }\n\n\n  #submit(e) {\n    // Prevent page from refreshing on form submit.\n    e.preventDefault();\n\n    // Collect the values from the form fields. formData will be an array of objects\n    // with key-value pairs referring to each field's name and value. \n    const formData = this.#fields.map((field) => {\n      return {\n        [field.name]: field.value\n      };\n    });\n\n    // Find the toast element and add the \"show\" class to it. \n    const toastElement = document.querySelector(\"#toast\");\n    toastElement.classList.add(\"show\");\n\n    // Set the text content of the toast element to be a JSON representation of formData.\n    toastElement.textContent = formData.map((el) => JSON.stringify(el));\n\n    // Wait 5 seconds, then remove the show class from the toast. \n    setTimeout(() => {\n      toastElement.classList.remove(\"show\");\n    }, 5000);\n\n    return formData;\n  }\n}*/\n\nclass Form {  // regarder explication dans fichier word car pas compris l'exercice\n  #fields = [];\n  #formElement = document.createElement(\"form\");\n\n  constructor(title) {\n    this.title = title;\n  }\n\n  addField(field) {\n    if (!field instanceof Field) {\n      throw new Error(\"You tried to add something that is not a field\");\n    }\n    this.#fields.push(field);\n    console.log(`Added field ${field.name} to form`);\n    return this;\n  }\n\n  render() {\n    const titleElement = document.createElement(\"h1\");\n    titleElement.textContent = this.title;\n    this.#formElement.append(titleElement);\n\n    this.#fields.forEach((field) => {\n      const fieldElement = field.render();\n      this.#formElement.append(fieldElement);\n    });\n\n    const buttonElement = document.createElement(\"button\");\n    buttonElement.type = \"submit\";\n    buttonElement.textContent = \"Submit\";\n    this.#formElement.append(buttonElement);\n\n    this.#formElement.addEventListener(\"submit\", this.#submit.bind(this));\n\n    document.body.append(this.#formElement);\n  }\n\n  #submit(e) {\n    // Prevent page from refreshing on form submit.\n    e.preventDefault();\n\n    // Collect the values from the form fields. formData will be an array of objects\n    // with key-value pairs referring to each field's name and value.\n    const formData = this.#fields.map((field) => {\n      return {\n        [field.name]: field.value\n      };\n    });\n\n    // Find the toast element and add the \"show\" class to it.\n    const toastElement = document.querySelector(\"#toast\");\n    toastElement.classList.add(\"show\");\n\n    // Set the text content of the toast element to be a JSON representation of formData.\n    toastElement.textContent = formData.map((el) => JSON.stringify(el));\n\n    // Wait 5 seconds, then remove the show class from the toast.\n    setTimeout(() => {\n      toastElement.classList.remove(\"show\");\n    }, 5000);\n\n    return formData;\n  }\n}\n\nclass Field {\n  #inputElement = document.createElement(\"input\");\n\n  constructor(options) {\n    this.name = options.name;\n    this.type = options.type;\n    this.label = options.label;\n  }\n\n  render() {\n    const labelElement = document.createElement(\"label\");\n    labelElement.innerText = this.label;\n\n    this.#inputElement.name = this.name;\n    this.#inputElement.type = this.type;\n\n    const fieldContainer = document.createElement(\"div\");\n    fieldContainer.classList.add(\"field-container\");\n\n    fieldContainer.append(labelElement);\n    fieldContainer.append(this.#inputElement);\n\n    return fieldContainer;\n  }\n\n  get value() {\n    return this.#inputElement.value;\n  }\n}\n\nconst form = new Form(\"Signup\");\n\nconst email = new Field({\n  name: \"email\",\n  type: \"email\",\n  label: \"email\"\n});\n\nconst password = new Field({\n  name: \"password\",\n  type: \"password\",\n  label: \"password\"\n});\n\nform.addField(email).addField(password).render();\n\n\n"],"names":["Form","fields","formElement","document","createElement","constructor","title","this","addField","field","Field","Error","push","console","log","name","render","titleElement","textContent","append","forEach","fieldElement","buttonElement","type","addEventListener","submit","bind","body","e","preventDefault","formData","map","value","toastElement","querySelector","classList","add","el","JSON","stringify","setTimeout","remove","inputElement","options","label","labelElement","innerText","fieldContainer","form","email","password"],"version":3,"file":"index.e1beb337.js.map"}